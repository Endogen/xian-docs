import{_ as n,D as o,c as r,I as e,w as a,a1 as h,j as t,a as i,o as l}from"./chunks/framework.B0uk8JDN.js";const c="/vitepress/assets/import.SRYP6QqY.png",p="/vitepress/assets/execute.CCgyYZEl.png",S=JSON.parse('{"title":"Model","description":"","frontmatter":{},"headers":[],"relativePath":"smart-contracts/concepts/model.md","filePath":"smart-contracts/concepts/model.md"}'),d={name:"smart-contracts/concepts/model.md"},k=h("",15),u=t("img",{src:c,width:"75%"},null,-1),m=t("p",null,"Executor retrieves the module for the smart contract if it exists.",-1),E=t("h3",{id:"step-2-execution",tabindex:"-1"},[i("Step 2: Execution "),t("a",{class:"header-anchor",href:"#step-2-execution","aria-label":'Permalink to "Step 2: Execution"'},"​")],-1),y=t("img",{src:p,width:"75%"},null,-1),g=t("p",null,"The executor attempts to execute a function on the smart contract. If it fails due to Python errors or invalid inputs, the executor will get a response. Otherwise, the function is called and the results of the execution are returned to the executor and which can be passed to the operator.",-1),f=t("h2",{id:"post-submission-code",tabindex:"-1"},[i("Post-Submission Code "),t("a",{class:"header-anchor",href:"#post-submission-code","aria-label":'Permalink to "Post-Submission Code"'},"​")],-1),b=t("p",null,"The rest of the guide is about what code is valid for submission of a smart contract. Once the smart contract is submitted, functions will generally not fail unless the inputs throw assertion errors that are raised inside of the contracts themselves.",-1),F=t("p",null,"It is the job of the smart contract developer to test and confirm the functionality of their contract before submission. After it has been submitted, the contract cannot be changed.",-1);function _(x,w,C,A,v,P){const s=o("center");return l(),r("div",null,[k,e(s,null,{default:a(()=>[u]),_:1}),m,E,e(s,null,{default:a(()=>[y]),_:1}),g,f,b,F])}const T=n(d,[["render",_]]);export{S as __pageData,T as default};
