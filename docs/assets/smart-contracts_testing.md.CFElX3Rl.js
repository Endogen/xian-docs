import{_ as t}from"./chunks/uber-dice-example-sandbox.2TWFxjDf.js";import{_ as e,c as n,j as s,a as l,t as a,a1 as h,o as p}from"./chunks/framework.B0uk8JDN.js";const b=JSON.parse('{"title":"Testing and Feedback","description":"As smart contracts get more and more complex, you need to be able to test them to make sure that they are doing what they are supposed to do. This becomes especially important once you start adding storage variables and functions that execute based on the person who is calling them.","frontmatter":{"title":"Testing and Feedback","description":"As smart contracts get more and more complex, you need to be able to test them to make sure that they are doing what they are supposed to do. This becomes especially important once you start adding storage variables and functions that execute based on the person who is calling them."},"headers":[],"relativePath":"smart-contracts/testing.md","filePath":"smart-contracts/testing.md"}'),r={name:"smart-contracts/testing.md"},k={id:"frontmatter-title",tabindex:"-1"},o=s("a",{class:"header-anchor",href:"#frontmatter-title","aria-label":'Permalink to "{{$frontmatter.title}}"'},"​",-1),d=h(`<h2 id="basic-smart-contract" tabindex="-1">Basic Smart Contract <a class="header-anchor" href="#basic-smart-contract" aria-label="Permalink to &quot;Basic Smart Contract&quot;">​</a></h2><p>We can write a simple smart contract and test to make sure it works.</p><p>contract.py (Smart Contract)</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@export</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> call_this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> complex_function(a)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> complex_function</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Quack!&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    elif</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Oink!&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    elif</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 15</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Woof!&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Meow!&#39;</span></span></code></pre></div><h2 id="writing-executing-tests" tabindex="-1">Writing &amp; Executing Tests <a class="header-anchor" href="#writing-executing-tests" aria-label="Permalink to &quot;Writing &amp; Executing Tests&quot;">​</a></h2><p>We will use Python&#39;s built-in <code>unittest</code> library. You can read how to use it <a href="https://docs.python.org/3/library/unittest.html" target="_blank" rel="noreferrer">here</a>.</p><p>This is the first part of our test script.</p><p>test_contract.py</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> unittest </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> TestCase</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> contracting.client </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ContractingClient</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TestSmartContract</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">TestCase</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> setUp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.c </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ContractingClient()</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.c.flush()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        with</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> open</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;contract.py&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> f:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            code </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> f.read()</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.c.submit(code, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;test_me&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.test_me </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.c.get_contract(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;test_me&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">   def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test_a_over_50_returns_quack</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        pass</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> tearDown</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.c.flush()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __name__</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ==</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;__main__&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    unittest.main()</span></span></code></pre></div><p>Key things that are happening:</p><ul><li>We import the client.</li><li>We override the <code>setUp</code> and <code>tearDown</code> functions in <code>TestCase</code> which execute before and after every test respectively. This gives us a clean state to work upon for each test.</li></ul><p>Before each test, we completely flush and resubmit the contract. After each test, we flush again. This is for sanity.</p><p>Now let&#39;s write the actual test.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> test_a_over_50_returns_quack</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.assertEqual(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.test_me.call_this(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">51</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Quack!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>The tests are pretty straightforward. Each branch of logic gets it&#39;s own test and the behavior is described. You can use whatever testing methods you&#39;d like. We also include a negative test case as an example of how to test that something fails.</p><h2 id="setup-guide" tabindex="-1">Setup Guide <a class="header-anchor" href="#setup-guide" aria-label="Permalink to &quot;Setup Guide&quot;">​</a></h2><h2 id="contract-dev-container" tabindex="-1">Contract Dev Container <a class="header-anchor" href="#contract-dev-container" aria-label="Permalink to &quot;Contract Dev Container&quot;">​</a></h2><p><em>This is a standardised environment for developing and testing smart contracts on Xian.</em></p><div class="info custom-block"><p class="custom-block-title">Installation</p><ol><li>Install Docker</li></ol><ul><li><a href="https://docs.docker.com/desktop/install/mac-install/" target="_blank" rel="noreferrer">MacOS</a></li><li><a href="https://docs.docker.com/desktop/install/windows-install/" target="_blank" rel="noreferrer">Windows</a></li><li>Linux <ul><li><code>curl -fsSL https://get.docker.com -o get-docker.sh</code></li><li><code>sudo sh get-docker.sh</code></li><li><code>sudo curl -L &quot;https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose</code></li><li><code>sudo chmod +x /usr/local/bin/docker-compose</code></li></ul></li></ul><ol start="2"><li><code>git clone https://github.com/xian-network/contract-dev-environment.git</code></li><li><code>cd contract-dev-environment</code></li><li><code>make build</code></li></ol></div><div class="info custom-block"><p class="custom-block-title">Usage</p><ol><li>Run <code>make test-shell</code> from cli <ul><li>This will open a command shell inside the container</li></ul></li><li>Develop your contracts &amp; tests in <code>/contracts</code></li><li>To execute your tests : <ul><li><code>pytest tests/test.py</code> from the shell</li></ul></li><li>To exit the test shell type <code>exit</code></li><li>Happy coding !</li></ol></div><h2 id="using-the-in-browser-sandbox" tabindex="-1">Using the in-browser Sandbox <a class="header-anchor" href="#using-the-in-browser-sandbox" aria-label="Permalink to &quot;Using the in-browser Sandbox&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><em>You will need to create a <strong>free</strong> account with codesandbox.com to interact with the sandbox.</em></p></div><img height="100%" width="100%" alt="Edit xian-network/dice-game/sandbox" src="`+t+'"><p><a href="https://codesandbox.io/p/github/xian-network/dice-game/sandbox?embed=1&amp;file=%2FREADME.md" target="_blank" rel="noreferrer"><img src="https://codesandbox.io/static/img/play-codesandbox.svg" alt="Edit xian-network/dice-game/sandbox"></a></p>',24);function c(i,g,E,y,u,m){return p(),n("div",null,[s("h1",k,[l(a(i.$frontmatter.title)+" ",1),o]),s("p",null,a(i.$frontmatter.description),1),d])}const C=e(r,[["render",c]]);export{b as __pageData,C as default};
