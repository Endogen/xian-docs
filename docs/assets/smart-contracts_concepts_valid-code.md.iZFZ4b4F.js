import{_ as t,c as s,o as i,a3 as a}from"./chunks/framework.BTdubn_4.js";const y=JSON.parse('{"title":"Valid Code","description":"","frontmatter":{},"headers":[],"relativePath":"smart-contracts/concepts/valid-code.md","filePath":"smart-contracts/concepts/valid-code.md"}'),e={name:"smart-contracts/concepts/valid-code.md"},d=a(`<h1 id="valid-code" tabindex="-1">Valid Code <a class="header-anchor" href="#valid-code" aria-label="Permalink to &quot;Valid Code&quot;">​</a></h1><h3 id="no-classes-allowed" tabindex="-1">No Classes Allowed! <a class="header-anchor" href="#no-classes-allowed" aria-label="Permalink to &quot;No Classes Allowed!&quot;">​</a></h3><p>Contracting maintains a strict &#39;no classes&#39; model. This forces you as the developer to create more procedural code that is explicit and completely self-contained. Contracts must be easy to read and understand for validity. Instead of thinking of your code in classes, think of each contract as a &#39;module&#39; that exposes certain functions to it&#39;s users.</p><p>All <code>class</code> keywords will fail your contract on submission. Even if you try to use classes for object oriented code, you will have to find another way to express your structures.</p><p>For example:</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Car</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	def</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __init__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, make, model):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">		self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.make </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> make</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">		self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.model </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> model</span></span></code></pre></div><p>This is illegal. Instead, describe objects in dictionary formats. If you tend to use classes to encapsulate data, simply use Python dictionaries instead. This is especially useful because of Contracting&#39;s storage model that makes it easy to store dictionaries.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cars </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Hash()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">cars[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;balthasar&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">	&#39;make&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Ford&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">	&#39;model&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Contour&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>Read more about storage in the Storage section.</p><h3 id="restricted-builtins" tabindex="-1">Restricted Builtins <a class="header-anchor" href="#restricted-builtins" aria-label="Permalink to &quot;Restricted Builtins&quot;">​</a></h3><p>Certain builtins such as <code>exec</code>, <code>eval</code>, and <code>compile</code> are obviously dangerous. We do not want to allow any arbitrary execution of code.</p><p>Here is a list of most Python3.11 builtin functions versus the ones we allow in Contracting. NOTE: All exceptions except the base Exception class are removed from Contracting.</p><table tabindex="0"><thead><tr><th>Built-Ins</th><th>Python3.11</th><th>Contracting</th><th>Reason for Restriction</th></tr></thead><tbody><tr><td><code>abs()</code></td><td>✓</td><td>✓</td><td></td></tr><tr><td><code>all()</code></td><td>✓</td><td>✓</td><td></td></tr><tr><td><code>any()</code></td><td>✓</td><td>✓</td><td></td></tr><tr><td><code>ascii()</code></td><td>✓</td><td>✓</td><td></td></tr><tr><td><code>bin()</code></td><td>✓</td><td>✓</td><td></td></tr><tr><td><code>bool()</code></td><td>✓</td><td>✓</td><td></td></tr><tr><td><code>bytearray()</code></td><td>✓</td><td>✓</td><td></td></tr><tr><td><code>bytes()</code></td><td>✓</td><td>✓</td><td></td></tr><tr><td><code>callable()</code></td><td>✓</td><td>✘</td><td>Functions are not passed as objects in Contracting.</td></tr><tr><td><code>chr()</code></td><td>✓</td><td>✓</td><td></td></tr><tr><td><code>classmethod()</code></td><td>✓</td><td>✘</td><td>Classes are disabled in Contracting.</td></tr><tr><td><code>compile()</code></td><td>✓</td><td>✘</td><td>Arbitrary code execution is a high security risk.</td></tr><tr><td><code>complex()</code></td><td>✓</td><td>✘</td><td>Complex numbers are potentially non-deterministic. This is a consensus failure risk.</td></tr><tr><td><code>copyright</code></td><td>✓</td><td>✘</td><td>Unnecessary.</td></tr><tr><td><code>credits</code></td><td>✓</td><td>✘</td><td>Unnecessary.</td></tr><tr><td><code>delattr()</code></td><td>✓</td><td>✘</td><td>Arbitrary removal of Python attributes could allow unauthorized access to private objects and methods.</td></tr><tr><td><code>dict()</code></td><td>✓</td><td>✓</td><td></td></tr><tr><td><code>dir()</code></td><td>✓</td><td>✘</td><td>Allows exploration path into security exploit development.</td></tr><tr><td><code>divmod()</code></td><td>✓</td><td>✓</td><td></td></tr><tr><td><code>enumerate()</code></td><td>✓</td><td>✘</td><td>Potentially safe. Evaluating to make sure.</td></tr><tr><td><code>eval()</code></td><td>✓</td><td>✘</td><td>Arbitrary code execution is a high security risk.</td></tr><tr><td><code>exec()</code></td><td>✓</td><td>✘</td><td>Arbitrary code execution is a high security risk.</td></tr><tr><td><code>filter()</code></td><td>✓</td><td>✓</td><td></td></tr><tr><td><code>float()</code></td><td>✓</td><td>✘</td><td>Floating point precision issues can lead to consensus failures.</td></tr><tr><td><code>format()</code></td><td>✓</td><td>✓</td><td></td></tr><tr><td><code>frozenset()</code></td><td>✓</td><td>✓</td><td></td></tr><tr><td><code>getattr()</code></td><td>✓</td><td>✘</td><td>Arbitrary access to attributes could allow private function execution.</td></tr><tr><td><code>globals()</code></td><td>✓</td><td>✘</td><td>Access to global scope methods allows modification of private methods and direct storage mechanisms.</td></tr><tr><td><code>hasattr()</code></td><td>✓</td><td>✘</td><td>Allows exploration path into security exploit development.</td></tr><tr><td><code>hash()</code></td><td>✓</td><td>✘</td><td>Potentially non-deterministic outcomes. Consensus failure risk.</td></tr><tr><td><code>help()</code></td><td>✓</td><td>✘</td><td>Unnecessary.</td></tr><tr><td><code>hex()</code></td><td>✓</td><td>✓</td><td></td></tr><tr><td><code>id()</code></td><td>✓</td><td>✘</td><td>Potentially non-deterministic outcomes. Consensus failure risk.</td></tr><tr><td><code>input()</code></td><td>✓</td><td>✘</td><td>User input not supported.</td></tr><tr><td><code>int()</code></td><td>✓</td><td>✓</td><td></td></tr><tr><td><code>isinstance()</code></td><td>✓</td><td>✓</td><td></td></tr><tr><td><code>issubclass()</code></td><td>✓</td><td>✓</td><td></td></tr><tr><td><code>iter()</code></td><td>✓</td><td>✘</td><td>Potential mutation of objects that are only supposed to be interfaced with through particular methods.</td></tr><tr><td><code>len()</code></td><td>✓</td><td>✓</td><td></td></tr><tr><td><code>license</code></td><td>✓</td><td>✘</td><td>Unnecessary.</td></tr><tr><td><code>list()</code></td><td>✓</td><td>✓</td><td></td></tr><tr><td><code>locals()</code></td><td>✓</td><td>✘</td><td>See globals()</td></tr><tr><td><code>map()</code></td><td>✓</td><td>✓</td><td></td></tr><tr><td><code>max()</code></td><td>✓</td><td>✓</td><td></td></tr><tr><td><code>memoryview()</code></td><td>✓</td><td>✘</td><td>Potentially non-deterministic outcomes. Consensus failure risk.</td></tr><tr><td><code>min()</code></td><td>✓</td><td>✓</td><td></td></tr><tr><td><code>next()</code></td><td>✓</td><td>✘</td><td>See iter()</td></tr><tr><td><code>object()</code></td><td>✓</td><td>✘</td><td>See callable()</td></tr><tr><td><code>oct()</code></td><td>✓</td><td>✓</td><td></td></tr><tr><td><code>open()</code></td><td>✓</td><td>✘</td><td>File I/O not supported.</td></tr><tr><td><code>ord()</code></td><td>✓</td><td>✓</td><td></td></tr><tr><td><code>pow()</code></td><td>✓</td><td>✓</td><td></td></tr><tr><td><code>print()</code></td><td>✓</td><td>✓</td><td></td></tr><tr><td><code>property()</code></td><td>✓</td><td>✘</td><td>Property creation not supported because classes are disabled.</td></tr><tr><td><code>range()</code></td><td>✓</td><td>✓</td><td></td></tr><tr><td><code>repr()</code></td><td>✓</td><td>✘</td><td>Unnecessary and non-deterministic due to memory address as output of this function. This is a consensus failure risk.</td></tr><tr><td><code>reversed()</code></td><td>✓</td><td>✓</td><td></td></tr><tr><td><code>round()</code></td><td>✓</td><td>✓</td><td></td></tr><tr><td><code>set()</code></td><td>✓</td><td>✓</td><td></td></tr><tr><td><code>setattr()</code></td><td>✓</td><td>✘</td><td>Arbitrary setting and overwriting of Python attributes has storage corruption and private method access implications.</td></tr><tr><td><code>slice()</code></td><td>✓</td><td>✘</td><td>Unnecessary.</td></tr><tr><td><code>sorted()</code></td><td>✓</td><td>✓</td><td></td></tr><tr><td><code>staticmethod()</code></td><td>✓</td><td>✘</td><td>Static methods are not supported because classes are disabled.</td></tr><tr><td><code>str()</code></td><td>✓</td><td>✓</td><td></td></tr><tr><td><code>sum()</code></td><td>✓</td><td>✓</td><td></td></tr><tr><td><code>super()</code></td><td>✓</td><td>✘</td><td>Super is not supported because classes are disabled.</td></tr><tr><td><code>tuple()</code></td><td>✓</td><td>✓</td><td></td></tr><tr><td><code>type()</code></td><td>✓</td><td>✓</td><td></td></tr><tr><td><code>vars()</code></td><td>✓</td><td>✘</td><td>Allows exploration path into security exploit development.</td></tr><tr><td><code>zip()</code></td><td>✓</td><td>✓</td><td></td></tr></tbody></table><h3 id="illegal-ast-nodes" tabindex="-1">Illegal AST Nodes <a class="header-anchor" href="#illegal-ast-nodes" aria-label="Permalink to &quot;Illegal AST Nodes&quot;">​</a></h3><p>Similarly, some of the AST (abstract syntax tree) nodes that make up deeper levels of the Python syntax are not allowed. Mainly, the nodes around the async/await features are restricted.</p><table tabindex="0"><thead><tr><th>AST Node</th><th>Reason for Restriction</th></tr></thead><tbody><tr><td><a href="https://greentreesnakes.readthedocs.io/en/latest/nodes.html#AsyncFor" target="_blank" rel="noreferrer">ast.AsyncFor</a></td><td>All async code is invalid in Contracting.</td></tr><tr><td><a href="https://greentreesnakes.readthedocs.io/en/latest/nodes.html#AsyncFunctionDef" target="_blank" rel="noreferrer">ast.AsyncFunctionDef</a></td><td>All async code is invalid in Contracting.</td></tr><tr><td><a href="https://greentreesnakes.readthedocs.io/en/latest/nodes.html#AsyncWith" target="_blank" rel="noreferrer">ast.AsyncWith</a></td><td>All async code is invalid in Contracting.</td></tr><tr><td>ast.AugLoad</td><td>AST Node never used in current CPython implementation.</td></tr><tr><td>ast.AugStore</td><td>AST Node never used in current CPython implementation.</td></tr><tr><td><a href="https://greentreesnakes.readthedocs.io/en/latest/nodes.html#Await" target="_blank" rel="noreferrer">ast.Await</a></td><td>All async code is invalid in Contracting.</td></tr><tr><td><a href="https://greentreesnakes.readthedocs.io/en/latest/nodes.html#ClassDef" target="_blank" rel="noreferrer">ast.ClassDef</a></td><td>Classes are disabled in Contracting.</td></tr><tr><td><a href="https://greentreesnakes.readthedocs.io/en/latest/nodes.html#Ellipsis" target="_blank" rel="noreferrer">ast.Ellipsis</a></td><td>Ellipsis should not be defined in a smart contract. They may be an effect of one.</td></tr><tr><td><a href="https://greentreesnakes.readthedocs.io/en/latest/nodes.html#GeneratorExp" target="_blank" rel="noreferrer">ast.GeneratorExp</a></td><td>Generators hold state that is incompatible with Contracting&#39;s model.</td></tr><tr><td><a href="https://greentreesnakes.readthedocs.io/en/latest/nodes.html#Global" target="_blank" rel="noreferrer">ast.Global</a></td><td>Scope modification could have security implications.</td></tr><tr><td>ast.Interactive</td><td>Only available in Python interpreters. Potential security risk.</td></tr><tr><td><a href="https://greentreesnakes.readthedocs.io/en/latest/nodes.html#MatMult" target="_blank" rel="noreferrer">ast.MatMult</a></td><td>New AST feature. Not yet widely adopted. Potential security risk.</td></tr><tr><td><a href="https://greentreesnakes.readthedocs.io/en/latest/nodes.html#Nonlocal" target="_blank" rel="noreferrer">ast.Nonlocal</a></td><td>Scope modification could have security implications.</td></tr><tr><td>ast.Suite</td><td>Similar to ast.Interactive</td></tr><tr><td><a href="https://greentreesnakes.readthedocs.io/en/latest/nodes.html#Yield" target="_blank" rel="noreferrer">ast.Yield</a></td><td>Generator related code is not compatible with Contracting.</td></tr><tr><td><a href="https://greentreesnakes.readthedocs.io/en/latest/nodes.html#YieldFrom" target="_blank" rel="noreferrer">ast.YieldFrom</a></td><td>Generator related code is not compatible with Contracting.</td></tr></tbody></table><h3 id="violations" tabindex="-1">Violations <a class="header-anchor" href="#violations" aria-label="Permalink to &quot;Violations&quot;">​</a></h3><p>The linter will check for several violations that will fail your smart contract automatically. Here is a list of the current violations and examples of code that will cause them.</p><h4 id="s1-illegal-contracting-syntax-type-used" tabindex="-1">S1- Illegal contracting syntax type used <a class="header-anchor" href="#s1-illegal-contracting-syntax-type-used" aria-label="Permalink to &quot;S1- Illegal contracting syntax type used&quot;">​</a></h4><p>Thrown when an AST type that is not allowed is visited by the linter.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> @</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # ast.MatMul code</span></span></code></pre></div><h4 id="s2-illicit-use-of-before-variable" tabindex="-1">S2- Illicit use of &#39;_&#39; before variable <a class="header-anchor" href="#s2-illicit-use-of-before-variable" aria-label="Permalink to &quot;S2- Illicit use of &#39;\\_&#39; before variable&quot;">​</a></h4><p>_ is used for gating certain functionality. Using it as a prefix to any variable will cause failure</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">_balances </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Hash()</span></span></code></pre></div><h4 id="s3-illicit-use-of-nested-imports" tabindex="-1">S3- Illicit use of Nested imports <a class="header-anchor" href="#s3-illicit-use-of-nested-imports" aria-label="Permalink to &quot;S3- Illicit use of Nested imports&quot;">​</a></h4><p><code>import</code> keywords found inside of functions, loops, etc. will fail.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> this_wont_fail</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@construct</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> seed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">():</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> this_will</span></span></code></pre></div><h4 id="s4-importfrom-compilation-nodes-not-yet-supported" tabindex="-1">S4- ImportFrom compilation nodes not yet supported <a class="header-anchor" href="#s4-importfrom-compilation-nodes-not-yet-supported" aria-label="Permalink to &quot;S4- ImportFrom compilation nodes not yet supported&quot;">​</a></h4><p>Selective importing is not supported and will fail contracts.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> token </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> send</span></span></code></pre></div><h4 id="s5-contract-not-found-in-lib" tabindex="-1">S5- Contract not found in lib <a class="header-anchor" href="#s5-contract-not-found-in-lib" aria-label="Permalink to &quot;S5- Contract not found in lib&quot;">​</a></h4><p>Not currently used.</p><h4 id="s6-illicit-use-of-classes" tabindex="-1">S6- Illicit use of classes <a class="header-anchor" href="#s6-illicit-use-of-classes" aria-label="Permalink to &quot;S6- Illicit use of classes&quot;">​</a></h4><p>Classes are not supported in Contracting and their keywords will fail your contract.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Car</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> __init__</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(self, make, model):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.make </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> make</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        self</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.model </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> model</span></span></code></pre></div><h4 id="s7-illicit-use-of-async-functions" tabindex="-1">S7- Illicit use of Async functions <a class="header-anchor" href="#s7-illicit-use-of-async-functions" aria-label="Permalink to &quot;S7- Illicit use of Async functions&quot;">​</a></h4><p>Any async related code will fail the contract.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fail_me</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">():</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    pass</span></span></code></pre></div><h4 id="s8-invalid-decorator-used" tabindex="-1">S8- Invalid decorator used <a class="header-anchor" href="#s8-invalid-decorator-used" aria-label="Permalink to &quot;S8- Invalid decorator used&quot;">​</a></h4><p><code>@export</code> and <code>@construct</code> are the only two decorators allowed in Contracting.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">v </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Variable()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@construct</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> seed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">():</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    v.set(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@export</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> get_v</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">():</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> v.get()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@unknown</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> this_will_fail</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">():</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    pass</span></span></code></pre></div><h4 id="s9-multiple-use-of-constructors-detected" tabindex="-1">S9- Multiple use of constructors detected <a class="header-anchor" href="#s9-multiple-use-of-constructors-detected" aria-label="Permalink to &quot;S9- Multiple use of constructors detected&quot;">​</a></h4><p>Only a single <code>@construct</code> can be included in a contract.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">v </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Variable()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@construct</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> seed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">():</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    v.set(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">123</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@construct</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> seed_2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">():</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    v.set(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">999</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h4 id="s10-illicit-use-of-multiple-decorators" tabindex="-1">S10- Illicit use of multiple decorators <a class="header-anchor" href="#s10-illicit-use-of-multiple-decorators" aria-label="Permalink to &quot;S10- Illicit use of multiple decorators&quot;">​</a></h4><p>Stacking decorators is not allowed.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">v </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Variable()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@export</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@construct</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> seed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">():</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    v.set(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">777</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h4 id="s11-illicit-keyword-overloading-for-orm-assignments" tabindex="-1">S11- Illicit keyword overloading for ORM assignments <a class="header-anchor" href="#s11-illicit-keyword-overloading-for-orm-assignments" aria-label="Permalink to &quot;S11- Illicit keyword overloading for ORM assignments&quot;">​</a></h4><p>ORM arguments are injected into the __init__ function on runtime. Messing with these will fail your contract.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">v </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Variable(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">contract</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;token&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">w </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Variable(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">driver</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">None</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Variable(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">another_kwarg</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;this will fail&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@export</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">():</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    v.set(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">777</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    w.set(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">999</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    x.set(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">123</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h4 id="s12-multiple-targets-to-orm-definition-detected" tabindex="-1">S12- Multiple targets to ORM definition detected <a class="header-anchor" href="#s12-multiple-targets-to-orm-definition-detected" aria-label="Permalink to &quot;S12- Multiple targets to ORM definition detected&quot;">​</a></h4><p>Python allows multiple assignment. Trying to do a multiple assignment from an ORM object will fail your contract.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">x, y </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Hash()</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@export</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> set</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">():</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    x[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;stu&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 100</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    y[</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;stu&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 999</span></span></code></pre></div><h4 id="s13-no-valid-contracting-decorator-found" tabindex="-1">S13- No valid contracting decorator found <a class="header-anchor" href="#s13-no-valid-contracting-decorator-found" aria-label="Permalink to &quot;S13- No valid contracting decorator found&quot;">​</a></h4><p>A contract without a single <code>@export</code> decorator is invalid.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@construct</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> seed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">():</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    pass</span></span></code></pre></div><h4 id="s14-illegal-use-of-a-builtin" tabindex="-1">S14- Illegal use of a builtin <a class="header-anchor" href="#s14-illegal-use-of-a-builtin" aria-label="Permalink to &quot;S14- Illegal use of a builtin&quot;">​</a></h4><p>Referencing a builtin that is illegal will fail the contract.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@export</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> credits</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">():</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> credits</span></span></code></pre></div><h4 id="s15-reuse-of-orm-name-definition-in-a-function-definition-argument-name" tabindex="-1">S15- Reuse of ORM name definition in a function definition argument name <a class="header-anchor" href="#s15-reuse-of-orm-name-definition-in-a-function-definition-argument-name" aria-label="Permalink to &quot;S15- Reuse of ORM name definition in a function definition argument name&quot;">​</a></h4><p>Reuse of any ORM names in any loops, functions, etc. will fail the contract.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">used_once </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Variable()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@export</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> override</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">():</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    used_once </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 123</span></span></code></pre></div>`,62),n=[d];function l(r,o,h,p,c,k){return i(),s("div",null,n)}const u=t(e,[["render",l]]);export{y as __pageData,u as default};
