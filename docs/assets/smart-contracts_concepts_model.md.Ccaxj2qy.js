import{_ as n,D as o,c as r,I as a,w as e,a3 as h,j as t,a as i,o as l}from"./chunks/framework.CeP8JoUz.js";const c="/assets/import.SRYP6QqY.png",d="/assets/execute.CCgyYZEl.png",S=JSON.parse('{"title":"Model","description":"","frontmatter":{},"headers":[],"relativePath":"smart-contracts/concepts/model.md","filePath":"smart-contracts/concepts/model.md"}'),p={name:"smart-contracts/concepts/model.md"},k=h(`<h1 id="model" tabindex="-1">Model <a class="header-anchor" href="#model" aria-label="Permalink to &quot;Model&quot;">​</a></h1><p>Contracting is 100% compatible Python code with a few modifications to make it more deterministic on different machines and safer in untrusted environments. You need to have knowledge of Python to be able to use Contracting.</p><h2 id="what-is-a-smart-contract-anyways" tabindex="-1">What is a smart contract, anyways? <a class="header-anchor" href="#what-is-a-smart-contract-anyways" aria-label="Permalink to &quot;What is a smart contract, anyways?&quot;">​</a></h2><p>Let&#39;s define what a smart contract is, and what one isn&#39;t.</p><table tabindex="0"><thead><tr><th>A smart contract is:</th><th>A smart contract isn&#39;t:</th></tr></thead><tbody><tr><td>Immutable</td><td>A full application</td></tr><tr><td>Open-Sourced</td><td>A database</td></tr><tr><td>Accessible through strict API</td><td>Able to act without interaction</td></tr><tr><td>A set of rules enforced by consensus</td><td>Able to draw data from the web arbitrarily</td></tr><tr><td>A function of its inputs</td><td></td></tr></tbody></table><p>Therefore, we have to make some considerations and alterations to what is allowed in a smart contract. We do not add any additional features to Python that make the code incompatible. Contracting is a strict subset.</p><h2 id="how-code-executes-usually" tabindex="-1">How Code Executes Usually <a class="header-anchor" href="#how-code-executes-usually" aria-label="Permalink to &quot;How Code Executes Usually&quot;">​</a></h2><p>In Python, you write code, run it, and it executes. It is either something that happens in sequence and then finishes, or is a long running asynchronous application such as a web server that runs in an event loop and processes requests over a long period of time.</p><p>Smart contracts do neither of these things!</p><h2 id="how-smart-contract-code-executes" tabindex="-1">How Smart Contract Code Executes <a class="header-anchor" href="#how-smart-contract-code-executes" aria-label="Permalink to &quot;How Smart Contract Code Executes&quot;">​</a></h2><p>Smart contracts define an explicit API that one can call. To execute code, you pass the contract and function name into the executor along with the keyword arguments for the specific function. To submit a new smart contract, you actually invoke a smart contract call specifically developed for submitting smart contracts.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> contracting.execution.executor </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Executor</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">contract_code </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;&#39;&#39;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">@export</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">def ping(pong):</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    return pong</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Executor(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">metering</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">False</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e.execute(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">sender</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;stu&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">		  contract_name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;submission&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">		  function_name</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;submit_contract&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">		  kwargs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">			  &#39;name&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;my_contract&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">			  &#39;code&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: contract_code</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		  })</span></span></code></pre></div><p>The above method uses the raw executor instead of the <code>ContractingClient</code> used in the &#39;Quick Start&#39; section. This shows you exactly how smart contract functions are called. The client takes care of this in a more elegant way and makes it feel more Pythonic to the developer.</p><p>Metering is set to false so that the executor does not use any stamps when executing this function. This is preferable in development environments.</p><h3 id="step-1-submit-transaction" tabindex="-1">Step 1: Submit Transaction <a class="header-anchor" href="#step-1-submit-transaction" aria-label="Permalink to &quot;Step 1: Submit Transaction&quot;">​</a></h3>`,15),u=t("img",{src:c,width:"75%"},null,-1),m=t("p",null,"Executor retrieves the module for the smart contract if it exists.",-1),E=t("h3",{id:"step-2-execution",tabindex:"-1"},[i("Step 2: Execution "),t("a",{class:"header-anchor",href:"#step-2-execution","aria-label":'Permalink to "Step 2: Execution"'},"​")],-1),y=t("img",{src:d,width:"75%"},null,-1),g=t("p",null,"The executor attempts to execute a function on the smart contract. If it fails due to Python errors or invalid inputs, the executor will get a response. Otherwise, the function is called and the results of the execution are returned to the executor and which can be passed to the operator.",-1),f=t("h2",{id:"post-submission-code",tabindex:"-1"},[i("Post-Submission Code "),t("a",{class:"header-anchor",href:"#post-submission-code","aria-label":'Permalink to "Post-Submission Code"'},"​")],-1),b=t("p",null,"The rest of the guide is about what code is valid for submission of a smart contract. Once the smart contract is submitted, functions will generally not fail unless the inputs throw assertion errors that are raised inside of the contracts themselves.",-1),F=t("p",null,"It is the job of the smart contract developer to test and confirm the functionality of their contract before submission. After it has been submitted, the contract cannot be changed.",-1);function _(x,w,C,A,v,P){const s=o("center");return l(),r("div",null,[k,a(s,null,{default:e(()=>[u]),_:1}),m,E,a(s,null,{default:e(()=>[y]),_:1}),g,f,b,F])}const T=n(p,[["render",_]]);export{S as __pageData,T as default};
