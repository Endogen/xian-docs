import{_ as s,c as i,o as a,a3 as t}from"./chunks/framework.BTdubn_4.js";const g=JSON.parse('{"title":"Crypto Standard Library","description":"","frontmatter":{},"headers":[],"relativePath":"smart-contracts/modules/crypto-stdlib.md","filePath":"smart-contracts/modules/crypto-stdlib.md"}'),e={name:"smart-contracts/modules/crypto-stdlib.md"},n=t(`<h1 id="crypto-standard-library" tabindex="-1">Crypto Standard Library <a class="header-anchor" href="#crypto-standard-library" aria-label="Permalink to &quot;Crypto Standard Library&quot;">â€‹</a></h1><p>In this example, the <code>verify_signature</code> function is an exported function in a Xian smart contract. It takes a verification key <code>vk</code>, a message <code>msg</code>, and a signature <code>signature</code>. It uses the <code>verify</code> function from the crypto module to check if the signature is valid for the given message and verification key. The result (True or False) is then returned. This can be used to ensure data integrity and authenticity in transactions within the smart contract environment.</p><p>This module uses the <code>PyNaCl</code> library under the hood, employing the <code>Ed25519</code> signature scheme.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@export</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> verify_signature</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(vk: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, msg: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, signature: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">str</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # Use the verify function to check if the signature is valid for the given message and verification key</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    is_valid </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> crypto.verify(vk, msg, signature)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # Return the result of the verification</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> is_valid</span></span></code></pre></div>`,4),r=[n];function h(o,l,d,p,c,k){return a(),i("div",null,r)}const u=s(e,[["render",h]]);export{g as __pageData,u as default};
